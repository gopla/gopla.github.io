{"version":3,"sources":["components/Particle/Particle.jsx","components/Desc/Desc.jsx","components/Button/Button.jsx","App.js","serviceWorker.js","index.js"],"names":["Particle","width","height","canvasClassName","params","background","color","particles","number","value","density","enable","value_area","shape","stroke","opacity","lineLinked","fpsLimit","retina_detect","Component","Desc","className","Delay","ms","Backspace","count","delay","socialLinks","text","label","link","Button","map","target","rel","href","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRA8CeA,G,8KAvCX,OACE,6BACE,kBAAC,IAAD,CACEC,MAAM,OACNC,OAAO,OACPC,gBAAgB,eAChBC,OAAQ,CACNC,WAAY,CACVC,MAAO,WAETC,UAAW,CACTC,OAAQ,CACNC,MAAO,GACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,MAGhBC,MAAO,CACLC,OAAQ,CACNb,MAAO,EACPK,MAAO,UACPS,QAAS,KAGbC,WAAY,CACVL,QAAQ,EACRL,MAAO,YAGXW,SAAU,GACVC,eAAe,U,GAjCJC,c,iBC6BRC,G,4LA1BX,OACE,6BACE,6BAASC,UAAU,QACjB,yBAAKA,UAAU,eACb,kBAAC,IAAD,KACE,qCACM,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MADxB,0BAIA,kBAAC,IAAOC,UAAR,CAAkBC,MAAO,GAAIC,MAAO,MACpC,iEACA,kBAAC,IAAOF,UAAR,CAAkBC,MAAO,GAAIC,MAAO,MACpC,0BAAML,UAAU,WAAhB,qFAIN,6BAASA,UAAU,YACjB,yBAAKA,UAAU,kBACb,6E,GApBOF,cCFbQ,G,OAAc,CAClB,CACEC,KAAM,kBACNC,MAAO,SACPC,KAAM,4BAER,CACEF,KAAM,qBACNC,MAAO,WACPC,KAAM,iCAER,CACEF,KAAM,sBACNC,MAAO,WACPC,KAAM,sCAER,CACEF,KAAM,eACNC,MAAO,YACPC,KAAM,4CAwBKC,E,uKARX,OACE,6BAASV,UAAU,UACjB,yBAAKA,UAAU,mBAbdM,EAAYK,KAAI,gBAAGJ,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,KAAhB,OACrB,uBAAGG,OAAO,SAASC,IAAI,sBAAsBC,KAAML,EAAMM,IAAKP,GAC5D,2BACGD,EADH,IACS,8BAAOC,c,GAMDV,aCrBNkB,MAVf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.daaa417d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Particles from 'react-particles-js'\r\n\r\nimport './Particle.css'\r\n\r\nclass Particle extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Particles\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          canvasClassName=\"particle__bg\"\r\n          params={{\r\n            background: {\r\n              color: '#1d4763',\r\n            },\r\n            particles: {\r\n              number: {\r\n                value: 70,\r\n                density: {\r\n                  enable: true,\r\n                  value_area: 1000,\r\n                },\r\n              },\r\n              shape: {\r\n                stroke: {\r\n                  width: 3,\r\n                  color: '#e6e500',\r\n                  opacity: 0.5,\r\n                },\r\n              },\r\n              lineLinked: {\r\n                enable: true,\r\n                color: '#5fc1c7',\r\n              },\r\n            },\r\n            fpsLimit: 60,\r\n            retina_detect: true,\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Particle\r\n","import React, { Component } from 'react'\r\nimport Typist from 'react-typist'\r\nimport 'react-typist/dist/Typist.css'\r\nimport 'react-typist/dist/standalone/Typist'\r\nimport './Desc.css'\r\n\r\nclass Desc extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <section className=\"desc\">\r\n          <div className=\"desc__title\">\r\n            <Typist>\r\n              <span>\r\n                Hi! <Typist.Delay ms={500} />\r\n                I'm Naufal Yudhistira.\r\n              </span>\r\n              <Typist.Backspace count={26} delay={1000} />\r\n              <span>Focusing on Backend Development</span>\r\n              <Typist.Backspace count={31} delay={1000} />\r\n              <span className=\"jp_font\">よろしくお願いいたします。</span>\r\n            </Typist>\r\n          </div>\r\n        </section>\r\n        <section className=\"subtitle\">\r\n          <div className=\"desc__subtitle\">\r\n            <span>Web Developer - Student - Daydreamer</span>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Desc\r\n","import React, { Component } from 'react'\r\n\r\nimport './Button.css'\r\n\r\nconst socialLinks = [\r\n  {\r\n    text: 'See my works on',\r\n    label: 'GitHub',\r\n    link: 'https://github.com/gopla',\r\n  },\r\n  {\r\n    text: 'Connect with me on',\r\n    label: 'LinkedIn',\r\n    link: 'https://linkedin.com/in/gopla',\r\n  },\r\n  {\r\n    text: 'Check my updates on',\r\n    label: 'Facebook',\r\n    link: 'https://fb.com/naufal.yudhistira12',\r\n  },\r\n  {\r\n    text: 'Follow me on',\r\n    label: 'Instagram',\r\n    link: 'https://instagram.com/naufalyudhistira',\r\n  },\r\n]\r\n\r\nconst renderLink = () => {\r\n  return socialLinks.map(({ text, label, link }) => (\r\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href={link} key={label}>\r\n      <p>\r\n        {text} <span>{label}</span>\r\n      </p>\r\n    </a>\r\n  ))\r\n}\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"button\">\r\n        <div className=\"button__content\">{renderLink()}</div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Particle from './components/Particle/Particle'\r\nimport Desc from './components/Desc/Desc'\r\nimport Button from './components/Button/Button'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Particle />\r\n      <Desc />\r\n      <Button />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}